# Deployment Workflow

## Two-Step Deployment Process

For all code changes and feature additions to the CyberpunkGoNC iOS app, follow this standardized two-step deployment workflow:

### Step 1: Documentation Update (AI-Driven)
**Before running any deployment scripts**, the AI assistant must:

1. **Analyze the changes made** - Review what code was modified, what features were added/fixed
2. **Update README.md** with:
   - Brief description of the changes in the appropriate section
   - Technical details about the implementation
   - User-facing improvements or bug fixes
   - Any new features or capabilities added
3. **Verify documentation accuracy** - Ensure the README reflects the current state of the app

### Step 2: Automated Deployment (Script-Driven)
**After README is updated**, run the deployment script:

```bash
./scripts/deploy-changes.sh "Brief commit title" "Detailed commit description"
```

The script handles:
- ‚úÖ Staging all changes (including updated README)
- ‚úÖ Verification of staging
- ‚úÖ Single-line commit with proper formatting
- ‚úÖ Commit verification
- ‚úÖ Push to GitHub
- ‚úÖ Final verification of clean working tree

## Why This Two-Step Process?

### Step 1 (AI) Handles:
- **Contextual understanding** of what changed and why
- **Technical documentation** that requires reasoning about code changes
- **User impact assessment** - how changes affect the user experience
- **Maintaining documentation quality** and consistency

### Step 2 (Script) Handles:
- **Mechanical git operations** that can be automated
- **Error checking** and verification at each step
- **Consistent commit formatting** and messaging
- **Safe deployment** with rollback capabilities

## Example Workflow

```bash
# 1. AI updates README.md with change description
# (This happens through the AI assistant)

# 2. Run deployment script
./scripts/deploy-changes.sh "üé® Fix map resizing issue" "Removed header, fixed map height to prevent resizing when district info panel expands"
```

## Benefits

- **Consistency**: Every deployment follows the same pattern
- **Documentation**: README always stays current with changes
- **Safety**: Each step is verified before proceeding
- **Efficiency**: Automation handles repetitive tasks
- **Quality**: AI reasoning ensures meaningful documentation

## Rules for AI Assistant

1. **ALWAYS update README.md first** before suggesting deployment
2. **Document the WHY** not just the what - explain user impact
3. **Keep technical details** accurate and current
4. **Use clear, concise language** for user-facing documentation
5. **Verify deployment success** by checking git status after script execution

### Terminal Output Analysis Protocol

When running `./scripts/deploy-changes.sh`:

1. **Don't panic if `run_in_terminal` shows `(empty)`** - this often means success, not failure
2. **Parse the script's comprehensive output** which includes:
   - Step-by-step progress indicators (`üîÑ Step X:`)
   - Success confirmations (`‚úÖ`) for each operation
   - Git operations results (staging, commit, push details)
   - Final verification data (status, log, sync state)
3. **Look for deployment success indicators** in the script output:
   - All steps showing `‚úÖ` completion
   - Commit hash in `[branch hash] message` format
   - GitHub push confirmation with object counts
   - `DEPLOYMENT_SUCCESS=true` in final summary

## AI Assistant Deployment Verification

After running the deploy script, the AI assistant must:

1. **Parse Script Output** - The deploy script already provides comprehensive verification data:
   - Git staging results with file counts
   - Commit creation with hash and message
   - GitHub push confirmation with transfer details
   - Final git status showing "working tree clean"
   - Summary with STATUS, SYNC_STATUS, and DEPLOYMENT_SUCCESS flags

2. **Look for Success Indicators** in the script's terminal output:
   - `‚úÖ` checkmarks for each successful step
   - `[branch hash] commit message` format confirming commit
   - `remote: Resolving deltas: 100%` indicating successful push
   - `DEPLOYMENT_SUCCESS=true` in final summary
   - `STATUS: CLEAN` showing clean working tree

3. **Avoid Duplicate Commands** - The script already runs and outputs:
   - `git status` results
   - `git log --oneline -2` for recent commits
   - All necessary verification data

4. **Report Deployment Status** - Based on parsing script output only:
   - Confirm successful deployment
   - Identify any failures from script output
   - Summarize what was deployed (commit hash, files changed, etc.)

**No additional git commands needed** - the script provides all verification data.

### Expected Script Output Format

The script outputs structured data that can be parsed:

```
=== DEPLOYMENT VERIFICATION REPORT ===
--- GIT STATUS ---
STATUS: CLEAN

--- REMOTE SYNC ---
SYNC_STATUS: UP_TO_DATE

--- RECENT COMMITS ---
Last 3 commits:
  abc1234 üìù Enhanced deployment workflow
  def5678 üé® Fix map resizing issue  
  ghi9012 üó∫Ô∏è Integrate Night City map

--- DEPLOYMENT SUMMARY ---
OVERALL_STATUS: SUCCESS
WORKING_TREE: CLEAN
SYNC_STATUS: UP_TO_DATE
=== END VERIFICATION REPORT ===
```

### Success Confirmation Checklist

After running deploy script, AI must verify:
- [ ] `git status` shows clean working tree
- [ ] `git log` shows new commit with expected message
- [ ] No error messages in terminal output
- [ ] All expected files were committed

## Rules for Developer

1. **Never skip Step 1** - documentation is not optional
2. **Review README changes** before running deployment script
3. **Use descriptive commit messages** that match the README updates
4. **Verify app functionality** before deploying changes
